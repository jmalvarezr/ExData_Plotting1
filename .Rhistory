lmlist[[i]]<-lm(yValues~nslist[[i]])
}
rmselist<-rep(0,10)
for (i in 1:10){
+   rmselist[i]<-rmse(predict(nslist[[i]],xValues),yValues)
+ }
for (i in 1:9){
cat(rmselist[i+1]-rmselist[i])
}
for (i in 1:10){
+   rmselist[i]<-rmse(predict(lmlist[[i]],xValues),yValues)
+ }
for (i in 1:9){
cat(rmselist[i+1]-rmselist[i])
}
rmselist[1]<-rmse(predict(lmlist[[1]]),yValues)
rmselist[1]<-rmse(predict(lmlist[[1]],xValues),yValues)
str(lmlist[[1]])
predict(lmlist[[1]],xValues)
class(lmlist[[1]])
head(xValues)
predict(lmlist[[1]],xValues)
predict(lmlist[[1]],nslist[[1]])
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
nslist<-list()
for (i in 1:10){
nslist[[i]]<-ns(xValues,df=i)
}
lmlist<-list()
for (i in 1:10){
lmlist[[i]]<-lm(yValues~nslist[[i]])
}
rmselist<-rep(0,10)
for (i in 1:10){
+   rmselist[i]<-rmse(predict(lmlist[[i]],nslist[[i]]),yValues)
+ }
for (i in 1:9){
cat(rmselist[i+1]-rmselist[i])
}
set.seed(53535)
xValues = seq(0,2*pi,length=100)
yValues = rnorm(100) + sin(xValues)
nslist<-list()
for (i in 1:10){
nslist[[i]]<-ns(xValues,df=i)
}
lmlist<-list()
for (i in 1:10){
lmlist[[i]]<-lm(yValues~nslist[[i]])
}
rmselist<-rep(0,10)
for (i in 1:10){
rmselist[i]<-rmse(predict(lmlist[[i]],nslist[[i]]),yValues)
}
for (i in 1:9){
cat(rmselist[i+1]-rmselist[i])
}
library(simpleboot)
data(airquality)
attach(airquality)
quantile(airquality$Wind,.75)
set.seed(883833)
bst<-one.boot(airquality$Wind,quantile,1000,probs=.75)
sd(bst$t)
library(tree)
data(Cars93,package="MASS")
set.seed(7363)
datrees<-list()
for (i in 1:3){
#Cars_sample1 = Cars93[sample(nrow(Cars93), replace=TRUE),]
inds<-sample(1:dim(Cars93)[1],dim(Cars93)[1],replace=TRUE);
datrees[[i]]=tree(DriveTrain~Price+Type,data=Cars93[inds,]);
}
newdata = data.frame(Type = "Large",Price = 20)
predict(datrees[[1]],newdata)
predict(datrees[[2]],newdata)
predict(datrees[[3]],newdata)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train[,"y"]<-as.factor(vowel.train[,"y"])
vowel.test[,"y"]<-as.factor(vowel.test[,"y"])
library(randomForest)
library(e1071)
set.seed(33833)
randomVowel<-randomForest(y~.,data=vowel.train,prox=TRUE)
svmVowel<-svm(y~.,data=vowel.train)
predict(svmVowel,vowel.test)
rmse(predict(svmVowel,vowel.test[,-1]),vowel.test[,1])
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train[,"y"]<-as.factor(vowel.train[,"y"])
vowel.test[,"y"]<-as.factor(vowel.test[,"y"])
library(randomForest)
library(e1071)
set.seed(33833)
randomVowel<-randomForest(y~.,data=vowel.train,prox=TRUE)
svmVowel<-svm(y~.,data=vowel.train)
predict(svmVowel,vowel.test)
rmse(predict(svmVowel,vowel.test[,-1]),vowel.test[,1])
mean(predict(svmVowel,vowel.test[,-1])!=vowel.test[,1])
mean(predict(randomVowel,vowel.test[,-1])!=vowel.test[,1])
agree<-which(predForest==predSVM)
mean(predSVM[agree]!=vowel.test[agree,1])
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
)
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
pValues
quantile(pValues)
alpha<-0.1
a<-alpha/100
sum(pvalues<a)
sum(pValues<a)
?order
pOrdered<-order(pValues)
head(pOrdered)
pOrdered
for(i in 1:100)
pOrdered<-order(pValues)
pSig<-rep(NA,100)
for (i in 1:100){
if (pValues[pOrdered[i]]<alpha*(i/100)){
pSig[i]<-1}
else{
pSig[i]<-0
}}
sum(pSig)
x<-rnorm(100);
e<-rnorm(100);
head(x);
y<-2*x+e
head(y)
quantile(x)
mod1<-lm(y~x+e)
summary(mod1)
x[x>xl]<-NA
xl<-0.8827618
x[x>xl]<-NA
mod2<-lm(y~x+e)
summary(mod2)
x<-rnorm(100);
e<-rnorm(100);
head(x);
y<-2*x+e
head(y)
quantile(y)
y1[y1<1.211427]<-NA
y1<-y
y1[y1<1.211427]<-NA
mod1<-lm(y~x+e)
mod2<-lm(y1~x+e)
summary(mod1)
summary(mod2)
y1<-y
y1[y1>1.211427]<-NA
mod2<-lm(y1~x+e)
summary(mod2)
x<-rnorm(100);
e<-rnorm(100);
y<-1+2*x+e;
modbase<-lm(y~x)
summary(modbase)
x_hi<-quantile(x,0.75)
x_hi
y_hi<-quantile(y,0.75)
xmiss<-x
xmiss[xmiss>x_hi]<-NA
ymiss<-y
ymiss[ymiss>y_hi]<-NA
modXmiss<-lm(y~xmiss)
modYmiss<-lm(ymiss<-x)
modYmiss<-lm(ymiss~x)
summary(modXmiss)
summary(modYmiss)
head(ymiss)
ymiss
ymiss[ymiss>y_hi]<-NA
ymiss
y_hi
y
ymiss<-y
ymiss[ymiss>y_hi]<-NA
ymiss
modYmiss<-lm(ymiss~x)
summary(modYmiss)
modXmiss$coef
modYmiss$coef
modbase$coef
y2<-(2*x)+e
library("MASS", lib.loc="C:/Program Files/R/R-3.0.0/library")
modbase2<-rlm(y~x)
modbase2$coef
modbase2<-rlm(y2~x)
modbase2$coef
modXmiss2<-rlm(y2~xmiss)
modXmiss2$coef
y_hi2<-quantile(y2,0.75)
ymiss2<-y2
ymiss2[ymiss2>y_hi2]<-NA
modYmiss2<-rlm(ymiss2<-x)
modYmiss2<-rlm(ymiss2~x)
modYmiss2$coef
ymiss2
ymiss2<-y2
ymiss2[ymiss2>y_hi2]<-NA
ymiss2
modYmiss2<-rlm(ymiss2~x)
modYmiss2$coef
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
alpha<-0.1
a<-alpha/100
sum(pValues<a)
pOrdered<-order(pValues)
pSig<-rep(NA,100)
for (i in 1:100){
if (pValues[pOrdered[i]]<alpha*(i/100)){
pSig[i]<-1}
else{
pSig[i]<-0
}}
sum(pSig)
mobase$coef
modbase$coef
modXmiss$coef
modYmiss$coef
mod2$coef
modbase2$coef
modXmiss2$coef
modYmiss2$coef
find.packages("KernSmooth")
find.package("KernSmooth")
library(KernSmooth)
if(!require(installr)){install.packages("installr");require(installr)}
updateR()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my-char,collapse=" ")
paste(my_char,collapse=" ")
my_name<-c(my_char,"Iurdaddy")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="_")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
end()
x<-1:10
if (x>5){x<-0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library("swirl", lib.loc="C:/Users/malvarez/Documents/R/win-library/3.1")
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar02,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(myData)<-cnames
myData
source('~/.active-rstudio-document')
x<-c(5,8,45,25,3,12,36)
cachemean(x)
makeVectos(x)
makeVector(x)
cachemean(x)
cachemean()
cachemean(makeVector(x))
a<-makeVector(x)
cachemean(a)
cachemean(a,c(22,33))
x<-c(x,22,33)
a<-makeVector(x)
cachemean(a)
cachemean(a)
y<-c(x,150,21)
b<-makeVector(y)
cachemean(b)
cachemean(a)
cachemean(b)
b
b$get
b$getmean
b$getmean()
b$get()
x<-matrix(x,3,3)
x
solve(x)
z<-x
identical(x,z)
identical(x,y)
cachemean(b)
b.set(y,c(2,8))
b$set(y,c(2,8))
b$set(c(y,2,8))
cachemean(b)
cachemean(b)
y
b$get()
cachemean(b$set(c(y,2,13)))
source('C:/Users/malvarez/RProgramming/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R')
d<-makeCacheMatrix(x)
cacheSolve(d)
cacheSolve(d)
solve(x)
ln(0.048)
log(0.048)
log(4.8)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
install.packages("xml")
install.packages("XML")
library("XML", lib.loc="C:/Users/malvarez/Documents/R/win-library/3.1")
doc<- xmlTreeParse(fileUrl, useInternal = TRUE)
setwd("C:/Users/malvarez/ExData_Plotting1/ExData_Plotting1")
data<-read.table("~/Coursera/Exploratory Data Analysis/Projects/Project1/data/household_power_consumption.txt",sep=";",header=TRUE,na.strings="?", colClasses=c("factor","factor","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
dat1<-subset(data,data$Date=="2/2/2007" | data$Date=="1/2/2007")
chardate<-as.character(dat1[,1])
chartime<-as.character(dat1[,2])
cardattime<-c(chardate,chartime)
head(chardattime)
chardattime<-c(chardate,chartime)
head(chardattime)
rm(list=c("chardattime","cardattime"))
chardattime<-chardate + " " + chartime
chardattime<-pasete(chardate, chartime, sep=" ")
chardattime<-paste(chardate, chartime, sep=" ")
head(chardattime)
?strptime
dadate<-strptime(chardattime, "%d %m %Y %H %M")
head(dadate)
dadate<-strptime(chardattime, "%d/%m/%Y %H:%M")
head(dadate)
newdata<-c(dadate,dat1[,3:9])
names(dadate)
class(dadate)
?POSIXlt
newdate<-as.POSIXct(dadate)
head(newdate)
newdata<-c(newdate,dat1[,3:9])
head(newdata)
newdata<-data.frame(c(newdate,dat1[,3:9]))
newdata<-data.frame(c(newdate,dat1[,3:9]),ncol=8)
plot(dat$Global_active_power,newdate)
plot(dat1$Global_active_power,newdate)
plot(newdate,dat1$Global_active_power)
lines(newdate,dat1$Global_active_power)
plot(newdate,dat1$Global_active_power,type="n")
lines(newdate,dat1$Global_active_power)
plot(newdate,dat1$Global_active_power,type="n", ylab="Global Active Power (kilowatts)")
lines(newdate,dat1$Global_active_power)
plot(newdate,dat1$Sub_metering_1, type="n")
lines(newdate,dat1$Sub_metering_1,col="black")
lines(newdate,dat1$Sub_metering_2,col="red")
lines(newdate,dat1$Sub_metering_3,col="blue")
legend("topright",col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright",col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),pch=1)
legend("topright",col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
plot(newdate,dat1$Sub_metering_1, type="n")
lines(newdate,dat1$Sub_metering_1,col="black")
lines(newdate,dat1$Sub_metering_2,col="red")
lines(newdate,dat1$Sub_metering_3,col="blue")
legend("topright",col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
plot(newdate,dat1$Sub_metering_1, type="n",ylab="Energy sub metering",xlab="")
lines(newdate,dat1$Sub_metering_1,col="black")
lines(newdate,dat1$Sub_metering_2,col="red")
lines(newdate,dat1$Sub_metering_3,col="blue")
legend("sáb",25,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
legend(sáb,25,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
legend(3,25,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
legend(max(newdate),25,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
plot(newdate,dat1$Sub_metering_1, type="n",ylab="Energy sub metering",xlab="")
lines(newdate,dat1$Sub_metering_1,col="black")
lines(newdate,dat1$Sub_metering_2,col="red")
lines(newdate,dat1$Sub_metering_3,col="blue")
legend("topright",col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
png(filename="plot1.png", height=480,width=480)
hist(dat1$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
png(filename="plot2.png", height=480,width=480)
plot(newdate,dat1$Global_active_power,type="n", ylab="Global Active Power (kilowatts)")
lines(newdate,dat1$Global_active_power)
png(filename="plot3.png", height=480,width=480)
plot(newdate,dat1$Sub_metering_1, type="n",ylab="Energy sub metering",xlab="")
lines(newdate,dat1$Sub_metering_1,col="black")
lines(newdate,dat1$Sub_metering_2,col="red")
lines(newdate,dat1$Sub_metering_3,col="blue")
legend("topright",col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1))
